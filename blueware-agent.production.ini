# ---------------------------------------------------------------------------

# This file configures the blueware agent.

# ---------------------------------------------------------------------------

# Here are the settings that are common to all environments.

[blueware]

# You must specify the license key associated with your blueware
# account. This key binds the Go Agent's data to your
# account in the blueware service.
license_key = XXXXXX

# Set the collector server host and all ports for collector connecting and data transporting
collector_host = 127.0.0.1
collector_port = 5888

# The application name. Set this to be the name of your
# application as you would like it to show up in blueware UI.
# The UI will then auto-map instances of your application into a
# entry on your home dashboard page.
app_name = BASIC-DNS-BRIDGE

# A semi colon separated name list. Used when you have multiple layers in your
# application, you set all app_name the same while different tier name in
# different layer, thus to determine a whole app_name by combined app_name
# and different tier names in layer hierarchy.
tier_name = basic-component

# Sets the name of a file to log collector's messages to. Useful for
# debugging any issues with the collector.
log_file = /tmp/go_agent.log

# Sets the level of detail of messages sent to the log file. Possible values, in
# increasing order of detail, are: "off", "error", "warn", "info" and "debug".
log_level = debug

# Enabled determines whether the agent will communicate with the Blueware
# servers and spawn goroutines.  Setting this to be false can be
# useful in testing and staging situations.
enabled = true

# The Go Agent communicates with the blueware.
# Note that this does result in an increase in
# CPU overhead, over and above what would occur for a non SSL
# connection, to perform the encryption involved in the SSL
# communication. This work is though done in a distinct thread
# to those handling your web requests, so it should not impact
# response times. You can if you wish revert to using a non SSL
# connection, but this will result in information being sent
# over a plain socket connection and will not be as secure.
ssl = false

# High Security Mode enforces certain security settings, and
# prevents them from being overridden, so that no sensitive data
# is sent to blueware. Enabling High Security Mode means that
# SSL is turned on, request parameters are not collected, and SQL
# can not be sent to blueware in its raw form. To activate High
# Security Mode, it must be set to 'true' in this local .ini
# configuration file AND be set to 'true' in the server-side
# configuration in the blueware user interface.
high_security = false

# apdex_t is the threshold of transaction. Default value is 0.5s.
apdex_t = 0.5

# The transaction tracer captures deep information about slow
# transactions and sends this to the UI on a periodic basis. The
# transaction tracer is enabled by default. Set this to "false"
# to turn it off.
transaction_tracer.enabled = true

# Threshold in seconds for when to collect a transaction trace.
# When the response time of a controller action exceeds this
# threshold, a transaction trace will be recorded and sent to
# the UI. Valid values are any positive float value, or (default)
# "apdex_f", which will use the threshold for a dissatisfying
# Apdex controller action - four times the apdex_t value.
transaction_tracer.transaction_threshold = apdex_f

# Threshold for capturing the Slow SQL
transaction_tracer.explain_threshold = 0.5

# Threshold in seconds for when to collect stack trace for a SQL
# call. In other words, when SQL statements exceed this
# threshold, then capture and send to the UI the current stack
# trace. This is helpful for pinpointing where long SQL calls
# originate from in an application.
transaction_tracer.stack_trace_threshold = 0.5

# The error collector captures information about uncaught
# exceptions or logged exceptions and sends them to UI for
# viewing. The error collector is enabled by default. Set this
# to "false" to turn it off.
error_collector.enabled = true

# ignore_status_codes controls which http response codes are
# automatically turned into errors.  By default, response codes
# greater than or equal to 400, with the exception of 404, are
# turned into errors.
# To stop specific response status codes turn into errors and report to the UI,
# set this to a comma separated list of the status codes to ignore.
# Default value is 404.
error_collector.ignore_status_codes = 404

# To control whether to record the slow sql trace
slow_sql.enabled = true

# To control whether to record the cross application trace
cross_application_tracer.enabled = true
